#* Merges two geojsons
#* @serializer geojson
#* @get /merge_files
merge_files(INPUT_FOLDER = "./uploads/", OUTPUT_FILE = "output_file.geojson")
library(geojsonR)
#* Merges two geojsons
#* @serializer geojson
#* @get /merge_files
merge_files(INPUT_FOLDER = "./uploads/", OUTPUT_FILE = "output_file.geojson")
#* Merges two geojsons
#* @serializer geojson
#* @get /merge_files
merge_files(INPUT_FOLDER = "./uploads/geojsons", OUTPUT_FILE = "merged_file.geojson")
#* Merges two geojsons
#* @serializer geojson
#* @get /merge_files
merge_files(INPUT_FOLDER = "./uploads/geojsons/", OUTPUT_FILE = "merged_file.geojson")
#* Merges two geojsons
#* @serializer geojson
#* @get /merge_files
merge_files(INPUT_FOLDER = "/uploads/geojsons/", OUTPUT_FILE = "merged_file.geojson")
#* Merges two geojsons
#* @serializer geojson
#* @get /merge_files
merge_files(INPUT_FOLDER = "../uploads/geojsons/", OUTPUT_FILE = "merged_file.geojson")
library(geojsonR)
#* Merges two geojsons
#* @serializer geojson
#* @get /merge_files
merge_files(INPUT_FOLDER = "../uploads/geojsons/", OUTPUT_FILE = "merged_file.json")
#* Merges two geojsons
#* @serializer geojson
#* @get /merge_files
merge_files(INPUT_FOLDER = "../uploads/geojsons/", OUTPUT_FILE = "merged_file.json")
#* Merges two geojsons
#* @serializer geojson
#* @get /merge_files
merge_files(INPUT_FOLDER = "../uploads/geojsons/", OUTPUT_FILE = "merged_file.geojson")
library(plumber)
r <- plumber::plumb("plumber.R")
r$run(port = 8000, host = "0.0.0.0", swagger = TRUE)
################################################################################
##### AOA
rm(list=ls())
library(terra)
library(raster)
library(caret)
library(tmap)
library(CAST)
## AOA Berechnung vorbereiten
studyAreaFuerAOA <- rast("D:/Uni/5. Semester/Geosoft2/Prototyp bearbeiten/AOA_Prototyp/AOA_Prototyp/frontend_entwurf/public/R/predictions/prediction.tif")
spplot(studyAreaFuerAOA)
modell <- readRDS("D:/Uni/5. Semester/Geosoft2/Prototyp bearbeiten/AOA_Prototyp/AOA_Prototyp/trainiertes model")
modell <- readRDS("D:/Uni/5. Semester/Geosoft2/Prototyp bearbeiten/AOA_Prototyp/AOA_Prototyp/trainiertes model.RDS")
modell <- readRDS("D:/Uni/5. Semester/Geosoft2/Prototyp bearbeiten/AOA_Prototyp/AOA_Prototyp/Beispieldaten/trainiertesmodel.RDS")
modell <- readRDS("D:/Uni/5. Semester/Geosoft2/Prototyp bearbeiten/AOA_Prototyp/AOA_Prototyp/Beispieldaten/trainiertesmodel.RDS")
modell <- readRDS("D:/Uni/5. Semester/Geosoft2/Prototyp bearbeiten/AOA_Prototyp/AOA_Prototyp/Beispieldaten/trainiertesmodel")
plot(modell)
## Testprediction durchführen (muss nicht sein)
prediction <- predict(as(studyAreaFuerAOA, "Raster"),modell)
pred_terra <- as(pred_MS_all,"SpatRaster")
## AOA berechnen
# DI <- trainDI(modell) ## kann man machen muss man aber nicht extra machen
AOA <- aoa(studyAreaFuerAOA,modell)
modell <- readRDS("D:/Uni/5. Semester/Geosoft2/Prototyp bearbeiten/AOA_Prototyp/AOA_Prototyp/Beispieldaten/trainiertesmodel")
plot(modell)
## AOA berechnen
# DI <- trainDI(modell) ## kann man machen muss man aber nicht extra machen
AOA <- aoa(studyAreaFuerAOA,modell)
spplot(AOA$DI, col.regions=viridis(100),main="Dissimilarity Index")
#plot predictions for the AOA only:
spplot(prediction, col.regions=viridis(100),main="prediction for the AOA")+
spplot(AOA$AOA,col.regions=c("grey","transparent"))
model_download <- ("http://localhost:3000/uploads/usertrainedmodel")
model <- readRDS(url(model_download)
## AOA Berechnung vorbereiten
studyAreaFuerAOA <- rast("D:/Uni/5. Semester/Geosoft2/Prototyp bearbeiten/AOA_Prototyp/AOA_Prototyp/frontend_entwurf/public/R/predictions/prediction.tif")
spplot(studyAreaFuerAOA)
model_download <- ("http://localhost:3000/uploads/usertrainedmodel")
model <- readRDS(url(model_download)
plot(modell)
model_download <- ("http://localhost:3000/uploads/usertrainedmodel")
model <- readRDS(url(model_download))
plot(model)
################################################################################
##### AOA
rm(list=ls())
## AOA Berechnung vorbereiten
studyAreaFuerAOA <- rast("D:/Uni/5. Semester/Geosoft2/Prototyp bearbeiten/AOA_Prototyp/AOA_Prototyp/frontend_entwurf/public/R/predictions/prediction.tif")
spplot(studyAreaFuerAOA)
model_download <- ("http://localhost:3000/uploads/usertrainedmodel")
model <- readRDS(url(model_download))
model_download <- ("http://localhost:3000/uploads/usertrainedmodel")
model <- readRDS(url(model_download))
plot(model)
## Testprediction durchführen (muss nicht sein)
prediction <- predict(as(studyAreaFuerAOA, "Raster"),model)
## AOA berechnen
# DI <- trainDI(modell) ## kann man machen muss man aber nicht extra machen
AOA <- aoa(studyAreaFuerAOA,model)
spplot(AOA$DI, col.regions=viridis(100),main="Dissimilarity Index")
## AOA berechnen
# DI <- trainDI(modell) ## kann man machen muss man aber nicht extra machen
AOA <- aoa(studyAreaFuerAOA,model)
## AOA berechnen
DI <- trainDI(model) ## kann man machen muss man aber nicht extra machen
library(plumber)
r <- plumber::plumb("plumber.R")
r$run(port = 8000, swagger = TRUE)
